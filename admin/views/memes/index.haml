-# -*- encoding : utf-8 -*-
:ruby
  active, this_action = {}, ''
  [:index, :new, :pending].each do |action|
    if request.path == url(:memes, action)
      this_action = action
      active[action] = :active
    else
      active[action] = ''
    end
  end
-pages = paginate(:memes, this_action, @total_memes, :current_page => @current_page, :per_page => @page_size, :template => :classic)
.block
  .secondary-navigation
    %ul.wat-cf
      %li.first{:class => active[:index]}=link_to pat(:list), url(:memes, :index)
      =partial 'memes/pending_tab', :locals => {:active => active[:pending]}
      %li{:class => active[:new]}=link_to pat(:new), url(:memes, :new)
  .content
    %h2.title
      =pat(:all)
      =mt(:memes)
    .inner
      =pages
      %table.table
        %tr
          %th
          %th=mat(:meme, :name)
          %th=mat(:meme, :slug)
          %th Views (tot/ext)
          %th=mat(:meme, :tags)
          %th=mat(:meme, :status)
          -#%th=mat(:meme, :created_at)
          -#%th=mat(:meme, :updated_at)
          -#%th=mat(:meme, :creator_id)
          -#%th=mat(:meme, :updater_id)
          %th.last="&nbsp;"
        -@memes.each do |meme|
          -kw_class = (meme.keywords.length == 0)? :alert : ''
          %tr
            %td
              -unless meme.ip_user_creator.nil?
                %img.tooltip{:src =>'/images/icons/light-bulb.png', :title => meme.ip_user_creator}
            %td=link_to meme.name, Memelinks.url(:meme, :show, :slug => meme.slug)
            %td=meme.slug
            %td=meme.all_views_count.to_s+' / '+meme.external_count.to_s
            %td.tooltip{:class => kw_class, :title => meme.keywords_string}=meme.keywords.length
            %td=meme.status_str
            -#%td=meme.created_at.strftime '%d/%m/%Y %H:%M:%S'
            -#%td=meme.updated_at.strftime '%d/%m/%Y %H:%M:%S'
            -#%td=meme.creator.name
            -#%td=meme.updater.name unless meme.updater.nil?
            %td.last
              =button_to pat(:edit), url(:memes, :edit, :id => meme.id), :method => :get, :class => :button_to
              ="|"
              =button_to pat(:delete), url(:memes, :destroy, :id => meme.id), :method => :delete, :class => :button_to, :onsubmit => "return confirm('#{pat(:confirm)}')"
      =pages
      .actions-bar.wat-cf
        .actions="&nbsp;"

-content_for :sidebar do
  -number_max_length = @top_memes[0].all_views_count.to_s.length
  .block
    %h3{:style => 'font-size: 1.3em'} Top 20 Memes
    .content
      %ol{:style => 'list-style: decimal-leading-zero inside; font-size: 1.1em; line-height: 1.8em'}
        -@top_memes.each do |meme|
          %li
            %tt{:style => 'font-weight: bold'}='['+meme.all_views_count.to_s.rjust(number_max_length)+']'
            =meme.name
